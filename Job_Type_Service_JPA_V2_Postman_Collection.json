{
	"info": {
		"_postman_id": "jpa-v2-job-type-service",
		"name": "Job Type Service JPA Version 2",
		"description": "Complete API collection for Job Type Service using JPA Repository pattern",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Basic CRUD Operations",
			"item": [
				{
					"name": "Create Job Type",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": \"JPA_TEST_001\",\n    \"description\": \"JPA Test Job Type 1\",\n    \"updateBy\": \"test_user\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v2/job-types",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"job-types"
							]
						},
						"description": "Create a new job type using JPA Repository"
					},
					"response": []
				},
				{
					"name": "Get Job Type by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v2/job-types/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"job-types",
								"1"
							]
						},
						"description": "Get job type by ID"
					},
					"response": []
				},
				{
					"name": "Get Job Type by Code",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v2/job-types/code/JPA_TEST_001",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"job-types",
								"code",
								"JPA_TEST_001"
							]
						},
						"description": "Get job type by code"
					},
					"response": []
				},
				{
					"name": "Update Job Type",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": \"JPA_UPDATED_001\",\n    \"description\": \"Updated JPA Test Job Type\",\n    \"updateBy\": \"updated_user\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v2/job-types/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"job-types",
								"1"
							]
						},
						"description": "Update job type by ID"
					},
					"response": []
				},
				{
					"name": "Delete Job Type by ID",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v2/job-types/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"job-types",
								"1"
							]
						},
						"description": "Delete job type by ID"
					},
					"response": []
				},
				{
					"name": "Delete Job Type by Code",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v2/job-types/code/JPA_TEST_001",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"job-types",
								"code",
								"JPA_TEST_001"
							]
						},
						"description": "Delete job type by code"
					},
					"response": []
				}
			],
			"description": "Basic CRUD operations for job types"
		},
		{
			"name": "Advanced Operations",
			"item": [
				{
					"name": "Get All Job Types",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v2/job-types",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"job-types"
							]
						},
						"description": "Get all job types"
					},
					"response": []
				},
				{
					"name": "Get All Job Types Ordered by Update Date (Desc)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v2/job-types/ordered/update-date-desc",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"job-types",
								"ordered",
								"update-date-desc"
							]
						},
						"description": "Get all job types ordered by update date descending"
					},
					"response": []
				},
				{
					"name": "Get All Job Types Ordered by Code (Asc)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v2/job-types/ordered/code-asc",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"job-types",
								"ordered",
								"code-asc"
							]
						},
						"description": "Get all job types ordered by code ascending"
					},
					"response": []
				}
			],
			"description": "Advanced query operations"
		},
		{
			"name": "Search and Filter Operations",
			"item": [
				{
					"name": "Search Job Types by Description",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v2/job-types/search/description?description=developer",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"job-types",
								"search",
								"description"
							],
							"query": [
								{
									"key": "description",
									"value": "developer"
								}
							]
						},
						"description": "Search job types by description containing text (case insensitive)"
					},
					"response": []
				},
				{
					"name": "Filter Job Types by Update User",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v2/job-types/filter/update-by?updateBy=admin",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"job-types",
								"filter",
								"update-by"
							],
							"query": [
								{
									"key": "updateBy",
									"value": "admin"
								}
							]
						},
						"description": "Filter job types by update user"
					},
					"response": []
				},
				{
					"name": "Filter Job Types Updated After Date",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v2/job-types/filter/updated-after?updateDate=2024-01-01T00:00:00",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"job-types",
								"filter",
								"updated-after"
							],
							"query": [
								{
									"key": "updateDate",
									"value": "2024-01-01T00:00:00"
								}
							]
						},
						"description": "Filter job types updated after specific date"
					},
					"response": []
				},
				{
					"name": "Filter Job Types Updated Between Dates",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v2/job-types/filter/updated-between?startDate=2024-01-01T00:00:00&endDate=2024-12-31T23:59:59",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"job-types",
								"filter",
								"updated-between"
							],
							"query": [
								{
									"key": "startDate",
									"value": "2024-01-01T00:00:00"
								},
								{
									"key": "endDate",
									"value": "2024-12-31T23:59:59"
								}
							]
						},
						"description": "Filter job types updated between two dates"
					},
					"response": []
				}
			],
			"description": "Search and filter operations"
		},
		{
			"name": "Utility Operations",
			"item": [
				{
					"name": "Check if Job Type Exists by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v2/job-types/exists/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"job-types",
								"exists",
								"1"
							]
						},
						"description": "Check if job type exists by ID"
					},
					"response": []
				},
				{
					"name": "Check if Job Type Exists by Code",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v2/job-types/exists/code/JPA_TEST_001",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"job-types",
								"exists",
								"code",
								"JPA_TEST_001"
							]
						},
						"description": "Check if job type exists by code"
					},
					"response": []
				},
				{
					"name": "Get Total Count of Job Types",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v2/job-types/count",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"job-types",
								"count"
							]
						},
						"description": "Get total count of job types"
					},
					"response": []
				},
				{
					"name": "Count Job Types by Update User",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v2/job-types/count/update-by?updateBy=admin",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"job-types",
								"count",
								"update-by"
							],
							"query": [
								{
									"key": "updateBy",
									"value": "admin"
								}
							]
						},
						"description": "Count job types by update user"
					},
					"response": []
				}
			],
			"description": "Utility operations for checking existence and counting"
		},
		{
			"name": "Error Handling Tests",
			"item": [
				{
					"name": "Create Job Type with Duplicate Code (Should Fail)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": \"JPA_TEST_001\",\n    \"description\": \"Duplicate code test\",\n    \"updateBy\": \"test_user\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v2/job-types",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"job-types"
							]
						},
						"description": "Try to create job type with duplicate code (should return 409)"
					},
					"response": []
				},
				{
					"name": "Get Non-existent Job Type (Should Fail)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v2/job-types/99999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"job-types",
								"99999"
							]
						},
						"description": "Try to get non-existent job type (should return 404)"
					},
					"response": []
				},
				{
					"name": "Update Non-existent Job Type (Should Fail)",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": \"NON_EXISTENT\",\n    \"description\": \"This should fail\",\n    \"updateBy\": \"test_user\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v2/job-types/99999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"job-types",
								"99999"
							]
						},
						"description": "Try to update non-existent job type (should return 404)"
					},
					"response": []
				},
				{
					"name": "Create Job Type with Invalid Data (Should Fail)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": \"\",\n    \"description\": \"\",\n    \"updateBy\": \"\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v2/job-types",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"job-types"
							]
						},
						"description": "Try to create job type with invalid data (should return 400)"
					},
					"response": []
				}
			],
			"description": "Test error handling scenarios"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8081",
			"type": "string"
		}
	]
}

